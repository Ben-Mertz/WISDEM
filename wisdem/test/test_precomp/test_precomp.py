import unittest

import numpy as np
import numpy.testing as npt

import wisdem.precomp.properties as prop
#from wisdem.precomp._precomp import precomp as _precomp

class TestPreCompProperties(unittest.TestCase):
    def test_tw_rate(self):

        # From NREL 5 MW
        myr = np.array([ 1.5,         3.62068966,  5.74137931,  7.86206897,  9.98275862, 12.10344828,
                         14.22413793, 16.34482759, 18.46551724, 20.5862069 , 22.70689655, 24.82758621,
                         26.94827586, 29.06896552, 31.18965517, 33.31034483, 35.43103448, 37.55172414,
                         39.67241379, 41.79310345, 43.9137931 , 46.03448276, 48.15517241, 50.27586207,
                         52.39655172, 54.51724138, 56.63793103, 58.75862069, 60.87931034, 63.        ])
        th0 = np.zeros(myr.shape)
        #th_prime_fort = _precomp.tw_rate(myr, th0)
        th_prime_fort = th0
        th_prime_py = prop.tw_rate(myr, th0)
        npt.assert_almost_equal(th_prime_fort, th_prime_py)

        th0 = np.linspace(10., -10., myr.size)
        #th_prime_fort = _precomp.tw_rate(myr, th0)
        th_prime_fort = -0.32520325*np.ones(th0.shape)
        th_prime_py = prop.tw_rate(myr, th0)
        npt.assert_almost_equal(th_prime_fort, th_prime_py)

    def test_properties_station0(self):
        # From NREL 5 MW station 0
        chord = 3.542
        theta = th_prime = 0.0
        le_loc = 0.5
        xnode = np.array([0.00000000e+00, 2.51728808e-04, 1.00666176e-03, 2.26403871e-03,
                          4.02259358e-03, 6.28055566e-03, 9.03565137e-03, 1.22851066e-02,
                          1.60256493e-02, 2.02535132e-02, 2.49644411e-02, 3.01536896e-02,
                          3.58160335e-02, 4.19457713e-02, 4.85367309e-02, 5.55822757e-02,
                          6.30753115e-02, 7.10082934e-02, 7.93732336e-02, 8.81617093e-02,
                          9.73648712e-02, 1.06973453e-01, 1.16977778e-01, 1.27367775e-01,
                          1.38132981e-01, 1.49262556e-01, 1.60745294e-01, 1.72569633e-01,
                          1.84723666e-01, 1.97195156e-01, 2.09971545e-01, 2.23039968e-01,
                          2.36387266e-01, 2.50000000e-01, 2.63864463e-01, 2.77966694e-01,
                          2.92292493e-01, 3.06827437e-01, 3.21556889e-01, 3.36466018e-01,
                          3.51539812e-01, 3.66763093e-01, 3.82120532e-01, 3.97596666e-01,
                          4.13175911e-01, 4.28842581e-01, 4.44580900e-01, 4.60375022e-01,
                          4.76209042e-01, 4.92067018e-01, 5.07932982e-01, 5.23790958e-01,
                          5.39624978e-01, 5.55419100e-01, 5.71157419e-01, 5.86824089e-01,
                          6.02403334e-01, 6.17879468e-01, 6.33236907e-01, 6.48460188e-01,
                          6.63533982e-01, 6.78443111e-01, 6.93172563e-01, 7.07707507e-01,
                          7.22033306e-01, 7.36135537e-01, 7.50000000e-01, 7.63612734e-01,
                          7.76960032e-01, 7.90028455e-01, 8.02804844e-01, 8.15276334e-01,
                          8.27430367e-01, 8.39254706e-01, 8.50737444e-01, 8.61867019e-01,
                          8.72632225e-01, 8.83022222e-01, 8.93026547e-01, 9.02635129e-01,
                          9.11838291e-01, 9.20626766e-01, 9.28991707e-01, 9.36924689e-01,
                          9.44417724e-01, 9.51463269e-01, 9.58054229e-01, 9.64183967e-01,
                          9.69846310e-01, 9.75035559e-01, 9.79746487e-01, 9.83974351e-01,
                          9.87714893e-01, 9.90964349e-01, 9.93719444e-01, 9.95977406e-01,
                          9.97735961e-01, 9.98993338e-01, 9.99748271e-01, 1.00000000e+00,
                          9.99748271e-01, 9.98993338e-01, 9.97735961e-01, 9.95977406e-01,
                          9.93719444e-01, 9.90964349e-01, 9.87714893e-01, 9.83974351e-01,
                          9.79746487e-01, 9.75035559e-01, 9.69846310e-01, 9.64183967e-01,
                          9.58054229e-01, 9.51463269e-01, 9.44417724e-01, 9.36924689e-01,
                          9.28991707e-01, 9.20626766e-01, 9.11838291e-01, 9.02635129e-01,
                          8.93026547e-01, 8.83022222e-01, 8.72632225e-01, 8.61867019e-01,
                          8.50737444e-01, 8.39254706e-01, 8.27430367e-01, 8.15276334e-01,
                          8.02804844e-01, 7.90028455e-01, 7.76960032e-01, 7.63612734e-01,
                          7.50000000e-01, 7.36135537e-01, 7.22033306e-01, 7.07707507e-01,
                          6.93172563e-01, 6.78443111e-01, 6.63533982e-01, 6.48460188e-01,
                          6.33236907e-01, 6.17879468e-01, 6.02403334e-01, 5.86824089e-01,
                          5.71157419e-01, 5.55419100e-01, 5.39624978e-01, 5.23790958e-01,
                          5.07932982e-01, 4.92067018e-01, 4.76209042e-01, 4.60375022e-01,
                          4.44580900e-01, 4.28842581e-01, 4.13175911e-01, 3.97596666e-01,
                          3.82120532e-01, 3.66763093e-01, 3.51539812e-01, 3.36466018e-01,
                          3.21556889e-01, 3.06827437e-01, 2.92292493e-01, 2.77966694e-01,
                          2.63864463e-01, 2.50000000e-01, 2.36387266e-01, 2.23039968e-01,
                          2.09971545e-01, 1.97195156e-01, 1.84723666e-01, 1.72569633e-01,
                          1.60745294e-01, 1.49262556e-01, 1.38132981e-01, 1.27367775e-01,
                          1.16977778e-01, 1.06973453e-01, 9.73648712e-02, 8.81617093e-02,
                          7.93732336e-02, 7.10082934e-02, 6.30753115e-02, 5.55822757e-02,
                          4.85367309e-02, 4.19457713e-02, 3.58160335e-02, 3.01536896e-02,
                          2.49644411e-02, 2.02535132e-02, 1.60256493e-02, 1.22851066e-02,
                          9.03565137e-03, 6.28055566e-03, 4.02259358e-03, 2.26403871e-03,
                          1.00666176e-03, 2.51728808e-04])
        ynode = np.array([ 0.         , 0.01462169 , 0.03093556 , 0.04686826 , 0.06258357 , 0.07861745,
                           0.09405252 , 0.10967754 , 0.12517467 , 0.14030205 , 0.15556546 , 0.17061296,
                           0.18530152 , 0.19996301 , 0.21449599 , 0.22874252 , 0.24262855 , 0.25634017,
                           0.26983858 , 0.28309181 , 0.29606886 , 0.30870461 , 0.32101182 , 0.33297108,
                           0.34460585 , 0.35590175 , 0.36684564 , 0.37742782 , 0.38764095 , 0.39746876,
                           0.40687689 , 0.4158685  , 0.4244587  , 0.43265564 , 0.44035434 , 0.44758788,
                           0.45439201 , 0.4607208  , 0.4666015  , 0.4720264  , 0.47698672 , 0.48148686,
                           0.48552288 , 0.48903208 , 0.49198712 , 0.4944485  , 0.49644181 , 0.49797497,
                           0.49903068 , 0.49956586 , 0.49951122 , 0.49896566 , 0.49795529 , 0.496483,
                           0.49454021 , 0.49197826 , 0.488932   , 0.48544118 , 0.4815031  , 0.47706314,
                           0.47204391 , 0.46659337 , 0.46072373 , 0.45444908 , 0.44755198 , 0.44023838,
                           0.4325517  , 0.42450843 , 0.41583676 , 0.40678988 , 0.39741734 , 0.38773107,
                           0.37741607 , 0.36678968 , 0.35588415 , 0.34465455 , 0.33287266 , 0.32086115,
                           0.30864941 , 0.29605157 , 0.28300335 , 0.26980349 , 0.25650823 , 0.24258332,
                           0.22849786 , 0.21437412 , 0.20008925 , 0.18538938 , 0.17029503 , 0.15488099,
                           0.13980699 , 0.12467987 , 0.10951799 , 0.09361538 , 0.07689355 , 0.06143269,
                           0.04835402 , 0.03087902 , 0.0122301  , 0.00369928, -0.01428549, -0.03074717,
                           -0.04732177, -0.06375087, -0.07907204, -0.09463611, -0.11041152, -0.12590768,
                          -0.14098449, -0.15620072, -0.17142561, -0.18610004, -0.20064589, -0.21515702,
                          -0.2295169 , -0.24337121, -0.2570841 , -0.27063306, -0.28390427, -0.29672722,
                          -0.30934207, -0.32172203, -0.33375775, -0.34532288, -0.35662667, -0.36763219,
                          -0.37826137, -0.38840314, -0.39819124, -0.40761009, -0.41665301, -0.4252099,
                          -0.43334852, -0.4410498 , -0.44831686, -0.45518375, -0.46154504, -0.46740234,
                          -0.47283049, -0.47778693, -0.48225506, -0.48627201, -0.48977107, -0.49274869,
                          -0.49525282, -0.49725252, -0.49875597, -0.49976917, -0.50027517, -0.50029574,
                          -0.49981064, -0.4988094 , -0.49728292, -0.49526513, -0.49277202, -0.48977413,
                          -0.48627141, -0.482278  , -0.47780307, -0.47284984, -0.46742386, -0.46153196,
                          -0.45518172, -0.4483774 , -0.44107921, -0.43334623, -0.4251908 , -0.41662661,
                          -0.40766583, -0.39826616, -0.38843777, -0.37820676, -0.36765976, -0.35672833,
                          -0.34538119, -0.33373416, -0.32178271, -0.30940667, -0.29682167, -0.28386015,
                          -0.27065183, -0.25715717, -0.24348009, -0.22943138, -0.21522871, -0.20084706,
                          -0.18616117, -0.17135669, -0.15630674, -0.14115807, -0.12588878, -0.11053819,
                          -0.09491395, -0.0792819 , -0.06370407, -0.04766179, -0.03168923, -0.01532304])
        
        E1 = np.array([3440000000.0, 41800000000.0, 27700000000.0, 13600000000.0, 200000000000.0, 205000000000.0, 118000000000.0, 98460000.0, 114500000000.0, 1000000.0, 4560000.0])
        E2 = np.array([3440000000.0, 14000000000.0, 13650000000.0, 13300000000.0, 200000000000.0, 205000000000.0, 118000000000.0, 98460000.0, 8390000000.0, 1000000.0, 4560000.0])
        G12 = np.array([1323000000.0, 2630000000.0, 7200000000.0, 11800000000.0, 79300000000.0, 80000000000.0, 47600000000.0, 98460000.0, 5990000000.0, 384615.3846153846, 1520000.0])
        nu12 = np.array([0.3, 0.28, 0.39, 0.49, 0.3, 0.3, 0.3, 0.3, 0.27, 0.3, 0.49])
        rho = np.array([1235.0, 1920.0, 1850.0, 1780.0, 7800.0, 7850.0, 7200.0, 200.0, 1220.0, 1150.0, 1100.0])
        locU = np.array([0.        , 0.62506011, 0.81300099, 1.        ])
        n_laminaU = np.array([4., 5., 4.])
        n_pliesU = np.array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
        tU = np.array([5.00e-05, 2.82e-03, 5.17e-02, 2.82e-03, 5.00e-05, 2.82e-03, 5.17e-02, 4.70e-04, 2.82e-03, 5.00e-05, 2.82e-03, 5.17e-02, 2.82e-03])
        thetaU = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
        mat_idxU = np.array([1, 3, 3, 3, 1, 3, 3, 9, 3, 1, 3, 3, 3], dtype=np.int_)
        locL = np.array([0.        , 0.18705037, 0.37497357, 1.        ])
        n_laminaL = np.array([4., 5., 4.])
        n_pliesL = np.array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
        tL = np.array([5.00e-05, 2.82e-03, 5.17e-02, 2.82e-03, 5.00e-05, 2.82e-03, 5.17e-02, 4.70e-04, 2.82e-03, 5.00e-05, 2.82e-03, 5.17e-02, 2.82e-03])
        thetaL = np.array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
        mat_idxL = np.array([1, 3, 3, 3, 1, 3, 3, 9, 3, 1, 3, 3, 3], dtype=np.int_)
        nwebs=2
        locW = np.array([0.64505453, 0.79653854])
        n_laminaW = np.array([3., 3.])
        n_pliesW = np.array([1., 1., 1., 1., 1., 1.])
        tW = np.array([0.002, 0.04 , 0.002, 0.002, 0.04 , 0.002])
        thetaW = np.array([0., 0., 0., 0., 0., 0.])
        mat_idxW = np.array([4, 8, 4, 4, 8, 4], dtype=np.int_)

        '''
        (eifbar,eilbar,gjbar,eabar,eiflbar,
         sfbar,slbar,sftbar,sltbar,satbar,
         z_sc,y_sc,ztc_ref,ytc_ref,
         mass,area,iflap_eta,ilag_zeta,tw_iner,
         zcm_ref,ycm_ref) = _precomp.properties(
            chord,
            theta,
            th_prime,
            le_loc,
            xnode,
            ynode,
            E1,
            E2,
            G12,
            nu12,
            rho,
            locU,
            n_laminaU,
            n_pliesU,
            tU,
            thetaU,
            mat_idxU,
            locL,
            n_laminaL,
            n_pliesL,
            tL,
            thetaL,
            mat_idxL,
            nwebs,
            locW,
            n_laminaW,
            n_pliesW,
            tW,
            thetaW,
            mat_idxW,
        )
        results_fort = (eifbar,eilbar,gjbar,eabar,eiflbar,
         sfbar,slbar,sftbar,sltbar,satbar,
         z_sc,y_sc,ztc_ref,ytc_ref,
         mass,area,iflap_eta,ilag_zeta,tw_iner,
         zcm_ref,ycm_ref)
        '''
        results_fort = (27308516769.571938, 27110066543.496548, 13952243204.641214, 18118671169.46572, 92074590.01435444, -15460.95170611851, -280289308.26126224, -0.0, 0.0, 0.0, -0.001389287095902369, -6.888888218723717e-05, -0.0013884337799190108, 0.01540075045502953, 1276.1536429600078, 17.366065830817725, 1872.3066063765666, 1851.0336173116082, -2.5971301230316066, -0.0013858779064898632, 0.056855450026708984)
        
        (eifbar, eilbar, gjbar, eabar, eiflbar,
         sfbar, slbar, sftbar, sltbar, satbar,
         z_sc, y_sc, ztc_ref, ytc_ref,
         mass, area, iflap_eta, ilag_zeta, tw_iner,
         zcm_ref, ycm_ref) = prop.properties(chord,
                                     theta,
                                     th_prime,
                                     le_loc,
                                     xnode,
                                     ynode,
                                     E1,
                                     E2,
                                     G12,
                                     nu12,
                                     rho,
                                     locU,
                                     n_laminaU,
                                     n_pliesU,
                                     tU,
                                     thetaU,
                                     mat_idxU,
                                     locL,
                                     n_laminaL,
                                     n_pliesL,
                                     tL,
                                     thetaL,
                                     mat_idxL,
                                     nwebs,
                                     locW,
                                     n_laminaW,
                                     n_pliesW,
                                     tW,
                                     thetaW,
                                     mat_idxW,
                                     )
        results_py = (eifbar,eilbar,gjbar,eabar,eiflbar,
         sfbar,slbar,sftbar,sltbar,satbar,
         z_sc,y_sc,ztc_ref,ytc_ref,
         mass,area,iflap_eta,ilag_zeta,tw_iner,
         zcm_ref,ycm_ref)
        npt.assert_almost_equal(results_fort, results_py)


if __name__ == "__main__":
    unittest.main()
